name: Deploy Application

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - 'app/**'
      - 'k8s/**'
      - '.github/workflows/app-deploy.yml'

env:
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build-and-push:
    name: Build and Push Images
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ env.IMAGE_TAG }}
      acr-login-server: ${{ steps.acr-details.outputs.login-server }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Get ACR Details
      id: acr-details
      run: |
        # Get ACR name from resource group
        ACR_NAME=$(az acr list --resource-group ${{ secrets.RESOURCE_GROUP_NAME }} --query "[0].name" -o tsv)
        ACR_LOGIN_SERVER=$(az acr show --name $ACR_NAME --query loginServer -o tsv)
        
        echo "acr-name=$ACR_NAME" >> $GITHUB_OUTPUT
        echo "login-server=$ACR_LOGIN_SERVER" >> $GITHUB_OUTPUT
        
        # Login to ACR using Azure CLI (no additional credentials needed)
        az acr login --name $ACR_NAME
        
        echo "✅ Logged into ACR: $ACR_LOGIN_SERVER"

    - name: Build and Push Backend Image
      run: |
        cd app/backend
        docker build -t ${{ steps.acr-details.outputs.login-server }}/retoucherirving/backend:${{ env.IMAGE_TAG }} .
        docker build -t ${{ steps.acr-details.outputs.login-server }}/retoucherirving/backend:latest .
        docker push ${{ steps.acr-details.outputs.login-server }}/retoucherirving/backend:${{ env.IMAGE_TAG }}
        docker push ${{ steps.acr-details.outputs.login-server }}/retoucherirving/backend:latest

    - name: Build and Push Frontend Image
      run: |
        cd app/frontend
        docker build -t ${{ steps.acr-details.outputs.login-server }}/retoucherirving/frontend:${{ env.IMAGE_TAG }} .
        docker build -t ${{ steps.acr-details.outputs.login-server }}/retoucherirving/frontend:latest .
        docker push ${{ steps.acr-details.outputs.login-server }}/retoucherirving/frontend:${{ env.IMAGE_TAG }}
        docker push ${{ steps.acr-details.outputs.login-server }}/retoucherirving/frontend:latest

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-push
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for better analysis

    # Snyk Container Scanning
    - name: Run Snyk Container Scan
      uses: snyk/actions/docker@master
      continue-on-error: false
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        image: ${{ needs.build-and-push.outputs.acr-login-server }}/retoucherirving/backend:${{ env.IMAGE_TAG }}
        args: --severity-threshold=high --fail-on=upgradable

    # Snyk Code Scanning (optional - for source code vulnerabilities)
    - name: Run Snyk Code Scan
      uses: snyk/actions/node@master
      continue-on-error: true  # Don't fail build on code issues
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

    # SonarCloud Analysis
    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        projectBaseDir: app/backend
        
    # Alternative: Manual SonarCloud with specific parameters
    - name: SonarCloud Analysis (Alternative)
      if: false  # Set to true if you want to use this instead
      run: |
        cd app/backend
        npx sonar-scanner \
          -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} \
          -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }} \
          -Dsonar.host.url=https://sonarcloud.io \
          -Dsonar.login=${{ secrets.SONAR_TOKEN }}

  deploy:
    name: Deploy to AKS
    runs-on: ubuntu-latest
    needs: [build-and-push, security-scan]
    environment: production
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup SSH Key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.JUMP_SERVER_IP }} >> ~/.ssh/known_hosts

    - name: Deploy to AKS via Jump Server
      run: |
        # Copy ALL files to jump server
        scp -r k8s/ azureuser@${{ secrets.JUMP_SERVER_IP }}:~/
        scp -r scripts/ azureuser@${{ secrets.JUMP_SERVER_IP }}:~/
        
        # Execute deployment on jump server
        ssh azureuser@${{ secrets.JUMP_SERVER_IP }} << 'EOF'
          # STEP 1: Setup jump server (install tools)
          echo "🛠️ Setting up jump server tools..."
          chmod +x scripts/*.sh
          ./scripts/setup-jump-server.sh
          
          # STEP 2: Set environment variables
          export RESOURCE_GROUP_NAME="${{ secrets.RESOURCE_GROUP_NAME }}"
          export AKS_CLUSTER_NAME="${{ secrets.AKS_CLUSTER_NAME }}"
          export ACR_LOGIN_SERVER="${{ needs.build-and-push.outputs.acr-login-server }}"
          export IMAGE_TAG="${{ env.IMAGE_TAG }}"
          export DB_HOST="${{ secrets.DATABASE_FQDN }}"
          export DB_PASSWORD="${{ secrets.DATABASE_ADMIN_PASSWORD }}"
          export APP_INSIGHTS_KEY="${{ secrets.APPLICATION_INSIGHTS_INSTRUMENTATION_KEY }}"
          export CLOUDFLARE_API_KEY="${{ secrets.CLOUDFLARE_API_KEY }}"
          export ARM_CLIENT_ID="${{ secrets.ARM_CLIENT_ID }}"
          export ARM_CLIENT_SECRET="${{ secrets.ARM_CLIENT_SECRET }}"
          export ARM_TENANT_ID="${{ secrets.ARM_TENANT_ID }}"
          
          # STEP 3: Run deployment
          echo "🚀 Starting application deployment..."
          ./scripts/deploy-to-aks.sh
        EOF

    - name: Verify Deployment
      run: |
        ssh azureuser@${{ secrets.JUMP_SERVER_IP }} << 'EOF'
          kubectl get pods -n retoucherirving
          kubectl get services -n retoucherirving
          kubectl get ingress -n retoucherirving
        EOF

    - name: Deployment Summary
      run: |
        echo "## 🚀 Deployment Successful" >> $GITHUB_STEP_SUMMARY
        echo "- Backend Image: \`${{ needs.build-and-push.outputs.acr-login-server }}/retoucherirving/backend:${{ env.IMAGE_TAG }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- Frontend Image: \`${{ needs.build-and-push.outputs.acr-login-server }}/retoucherirving/frontend:${{ env.IMAGE_TAG }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- Website: https://retoucherirving.com" >> $GITHUB_STEP_SUMMARY
        echo "- Jump Server: ${{ secrets.JUMP_SERVER_IP }}" >> $GITHUB_STEP_SUMMARY