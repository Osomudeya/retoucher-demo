name: Deploy Application

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - 'app/**'
      - 'k8s/**'
      - '.github/workflows/app-deploy.yml'

env:
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build-and-push:
    name: Build and Push Images
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ env.IMAGE_TAG }}
      acr-login-server: ${{ steps.acr-details.outputs.login-server }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Get ACR Details
      id: acr-details
      run: |
        # Use the ACR created by Terraform
        ACR_LOGIN_SERVER="${{ secrets.ACR_LOGIN_SERVER }}"
        ACR_NAME=$(echo $ACR_LOGIN_SERVER | cut -d'.' -f1)
        
        echo "acr-name=$ACR_NAME" >> $GITHUB_OUTPUT
        echo "login-server=$ACR_LOGIN_SERVER" >> $GITHUB_OUTPUT
        
        # Login to ACR using Azure CLI
        az acr login --name $ACR_NAME
        
        echo "✅ Logged into ACR: $ACR_LOGIN_SERVER"

    - name: Build and Push Backend Image
      run: |
        cd app/backend
        docker build -t ${{ steps.acr-details.outputs.login-server }}/retoucherirving/backend:${{ env.IMAGE_TAG }} .
        docker build -t ${{ steps.acr-details.outputs.login-server }}/retoucherirving/backend:latest .
        docker push ${{ steps.acr-details.outputs.login-server }}/retoucherirving/backend:${{ env.IMAGE_TAG }}
        docker push ${{ steps.acr-details.outputs.login-server }}/retoucherirving/backend:latest

    - name: Build and Push Frontend Image
      run: |
        cd app/frontend
        docker build -t ${{ steps.acr-details.outputs.login-server }}/retoucherirving/frontend:${{ env.IMAGE_TAG }} .
        docker build -t ${{ steps.acr-details.outputs.login-server }}/retoucherirving/frontend:latest .
        docker push ${{ steps.acr-details.outputs.login-server }}/retoucherirving/frontend:${{ env.IMAGE_TAG }}
        docker push ${{ steps.acr-details.outputs.login-server }}/retoucherirving/frontend:latest

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-push
    continue-on-error: true  # Don't block deployment on security scan failures
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Run Snyk Container Scan
      uses: snyk/actions/docker@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        image: ${{ needs.build-and-push.outputs.acr-login-server }}/retoucherirving/backend:${{ env.IMAGE_TAG }}
        args: --severity-threshold=high --fail-on=upgradable
      if: env.SNYK_TOKEN != ''

    - name: Run Snyk Code Scan
      uses: snyk/actions/node@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high
      if: env.SNYK_TOKEN != ''

    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      continue-on-error: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        projectBaseDir: app/backend
      if: env.SONAR_TOKEN != ''

  deploy:
    name: Deploy to AKS
    runs-on: ubuntu-latest
    needs: [build-and-push]  # Removed security-scan dependency to allow deployment without security tools
    environment: production
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup SSH Key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.JUMP_SERVER_IP }} >> ~/.ssh/known_hosts

    - name: Copy Files to Jump Server
      run: |
        # Copy Kubernetes manifests and scripts
        scp -r k8s/ azureuser@${{ secrets.JUMP_SERVER_IP }}:~/
        scp -r scripts/ azureuser@${{ secrets.JUMP_SERVER_IP }}:~/
        
        # Copy any additional config files if they exist
        if [ -d "config/" ]; then
          scp -r config/ azureuser@${{ secrets.JUMP_SERVER_IP }}:~/
        fi

    - name: Deploy to AKS via Jump Server
      run: |
        ssh azureuser@${{ secrets.JUMP_SERVER_IP }} << 'EOF'
          # STEP 1: Setup jump server (install tools if needed)
          echo "🛠️ Setting up jump server tools..."
          if [ -f "scripts/setup-jump-server.sh" ]; then
            chmod +x scripts/*.sh
            ./scripts/setup-jump-server.sh
          fi
          
          # STEP 2: Azure Login for kubectl access
          az login --service-principal \
            --username ${{ secrets.ARM_CLIENT_ID }} \
            --password ${{ secrets.ARM_CLIENT_SECRET }} \
            --tenant ${{ secrets.ARM_TENANT_ID }}
          
          # STEP 3: Get AKS credentials
          az aks get-credentials \
            --resource-group ${{ secrets.AKS_RESOURCE_GROUP }} \
            --name ${{ secrets.AKS_CLUSTER_NAME }} \
            --overwrite-existing
          
          # STEP 4: Set environment variables for deployment
          export RESOURCE_GROUP_NAME="${{ secrets.AKS_RESOURCE_GROUP }}"
          export AKS_CLUSTER_NAME="${{ secrets.AKS_CLUSTER_NAME }}"
          export ACR_LOGIN_SERVER="${{ needs.build-and-push.outputs.acr-login-server }}"
          export IMAGE_TAG="${{ env.IMAGE_TAG }}"
          export DATABASE_HOST="${{ secrets.DATABASE_FQDN }}"
          export DATABASE_USER="${{ secrets.DATABASE_USER }}"
          export DATABASE_PASSWORD="${{ secrets.DATABASE_PASSWORD }}"
          export DATABASE_NAME="${{ secrets.DATABASE_NAME }}"
          export APPLICATION_INSIGHTS_KEY="${{ secrets.APPLICATION_INSIGHTS_INSTRUMENTATION_KEY }}"
          
          # Optional environment variables
          export ENVIRONMENT="production"
          export PROJECT_NAME="retoucherirving"
          
          # STEP 5: Update Kubernetes manifests with current values
          echo "📝 Updating Kubernetes manifests..."
          
          # Replace image tags in deployment files
          find k8s/ -name "*.yaml" -o -name "*.yml" | xargs sed -i "s|{{IMAGE_TAG}}|${IMAGE_TAG}|g"
          find k8s/ -name "*.yaml" -o -name "*.yml" | xargs sed -i "s|{{ACR_LOGIN_SERVER}}|${ACR_LOGIN_SERVER}|g"
          find k8s/ -name "*.yaml" -o -name "*.yml" | xargs sed -i "s|{{DATABASE_HOST}}|${DATABASE_HOST}|g"
          find k8s/ -name "*.yaml" -o -name "*.yml" | xargs sed -i "s|{{DATABASE_USER}}|${DATABASE_USER}|g"
          find k8s/ -name "*.yaml" -o -name "*.yml" | xargs sed -i "s|{{DATABASE_NAME}}|${DATABASE_NAME}|g"
          
          # STEP 6: Create namespace if it doesn't exist
          kubectl create namespace retoucherirving --dry-run=client -o yaml | kubectl apply -f -
          
          # STEP 7: Create secrets
          echo "🔐 Creating/updating secrets..."
          kubectl create secret generic app-secrets \
            --from-literal=database-password="${DATABASE_PASSWORD}" \
            --from-literal=application-insights-key="${APPLICATION_INSIGHTS_KEY}" \
            --namespace=retoucherirving \
            --dry-run=client -o yaml | kubectl apply -f -
          
          # STEP 8: Deploy application
          echo "🚀 Deploying application to AKS..."
          
          if [ -f "scripts/deploy-to-aks.sh" ]; then
            # Use custom deployment script if available
            ./scripts/deploy-to-aks.sh
          else
            # Default deployment using kubectl
            kubectl apply -f k8s/ --namespace=retoucherirving
          fi
          
          # STEP 9: Wait for deployment rollout
          echo "⏳ Waiting for deployment to complete..."
          kubectl rollout status deployment/backend-deployment --namespace=retoucherirving --timeout=300s
          kubectl rollout status deployment/frontend-deployment --namespace=retoucherirving --timeout=300s
          
          echo "✅ Deployment completed successfully!"
        EOF

    - name: Verify Deployment
      run: |
        ssh azureuser@${{ secrets.JUMP_SERVER_IP }} << 'EOF'
          echo "🔍 Verifying deployment status..."
          
          echo "Pods:"
          kubectl get pods -n retoucherirving
          
          echo -e "\nServices:"
          kubectl get services -n retoucherirving
          
          echo -e "\nIngress:"
          kubectl get ingress -n retoucherirving
          
          echo -e "\nDeployment status:"
          kubectl get deployments -n retoucherirving
          
          # Check if pods are ready
          kubectl wait --for=condition=ready pod -l app=backend -n retoucherirving --timeout=60s
          kubectl wait --for=condition=ready pod -l app=frontend -n retoucherirving --timeout=60s
        EOF

    - name: Deployment Summary
      run: |
        echo "## 🚀 Deployment Successful" >> $GITHUB_STEP_SUMMARY
        echo "- **Backend Image:** \`${{ needs.build-and-push.outputs.acr-login-server }}/retoucherirving/backend:${{ env.IMAGE_TAG }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Frontend Image:** \`${{ needs.build-and-push.outputs.acr-login-server }}/retoucherirving/frontend:${{ env.IMAGE_TAG }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment:** Production" >> $GITHUB_STEP_SUMMARY
        echo "- **AKS Cluster:** ${{ secrets.AKS_CLUSTER_NAME }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Resource Group:** ${{ secrets.AKS_RESOURCE_GROUP }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Jump Server:** ${{ secrets.JUMP_SERVER_IP }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Website:** https://retoucherirving.com" >> $GITHUB_STEP_SUMMARY


# name: Deploy Application

# on:
#   workflow_dispatch:
#   push:
#     branches:
#       - main
#     paths:
#       - 'app/**'
#       - 'k8s/**'
#       - '.github/workflows/app-deploy.yml'

# env:
#   IMAGE_TAG: ${{ github.sha }}

# jobs:
#   build-and-push:
#     name: Build and Push Images
#     runs-on: ubuntu-latest
#     outputs:
#       image-tag: ${{ env.IMAGE_TAG }}
#       acr-login-server: ${{ steps.acr-details.outputs.login-server }}
    
#     steps:
#     - name: Checkout
#       uses: actions/checkout@v4

#     - name: Azure Login
#       uses: azure/login@v1
#       with:
#         creds: ${{ secrets.AZURE_CREDENTIALS }}

#     - name: Get ACR Details
#       id: acr-details
#       run: |
#         # Get ACR name from resource group
#         ACR_NAME=$(az acr list --resource-group ${{ secrets.RESOURCE_GROUP_NAME }} --query "[0].name" -o tsv)
#         ACR_LOGIN_SERVER=$(az acr show --name $ACR_NAME --query loginServer -o tsv)
        
#         echo "acr-name=$ACR_NAME" >> $GITHUB_OUTPUT
#         echo "login-server=$ACR_LOGIN_SERVER" >> $GITHUB_OUTPUT
        
#         # Login to ACR using Azure CLI (no additional credentials needed)
#         az acr login --name $ACR_NAME
        
#         echo "✅ Logged into ACR: $ACR_LOGIN_SERVER"

#     - name: Build and Push Backend Image
#       run: |
#         cd app/backend
#         docker build -t ${{ steps.acr-details.outputs.login-server }}/retoucherirving/backend:${{ env.IMAGE_TAG }} .
#         docker build -t ${{ steps.acr-details.outputs.login-server }}/retoucherirving/backend:latest .
#         docker push ${{ steps.acr-details.outputs.login-server }}/retoucherirving/backend:${{ env.IMAGE_TAG }}
#         docker push ${{ steps.acr-details.outputs.login-server }}/retoucherirving/backend:latest

#     - name: Build and Push Frontend Image
#       run: |
#         cd app/frontend
#         docker build -t ${{ steps.acr-details.outputs.login-server }}/retoucherirving/frontend:${{ env.IMAGE_TAG }} .
#         docker build -t ${{ steps.acr-details.outputs.login-server }}/retoucherirving/frontend:latest .
#         docker push ${{ steps.acr-details.outputs.login-server }}/retoucherirving/frontend:${{ env.IMAGE_TAG }}
#         docker push ${{ steps.acr-details.outputs.login-server }}/retoucherirving/frontend:latest

#   security-scan:
#     name: Security Scan
#     runs-on: ubuntu-latest
#     needs: build-and-push
    
#     steps:
#     - name: Checkout
#       uses: actions/checkout@v4
#       with:
#         fetch-depth: 0  # Shallow clones should be disabled for better analysis

#     # Snyk Container Scanning
#     - name: Run Snyk Container Scan
#       uses: snyk/actions/docker@master
#       continue-on-error: false
#       env:
#         SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
#       with:
#         image: ${{ needs.build-and-push.outputs.acr-login-server }}/retoucherirving/backend:${{ env.IMAGE_TAG }}
#         args: --severity-threshold=high --fail-on=upgradable

#     # Snyk Code Scanning (optional - for source code vulnerabilities)
#     - name: Run Snyk Code Scan
#       uses: snyk/actions/node@master
#       continue-on-error: true  # Don't fail build on code issues
#       env:
#         SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
#       with:
#         args: --severity-threshold=high

#     # SonarCloud Analysis
#     - name: SonarCloud Scan
#       uses: SonarSource/sonarcloud-github-action@master
#       env:
#         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#       with:
#         projectBaseDir: app/backend
        
#     # Alternative: Manual SonarCloud with specific parameters
#     - name: SonarCloud Analysis (Alternative)
#       if: false  # Set to true if you want to use this instead
#       run: |
#         cd app/backend
#         npx sonar-scanner \
#           -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} \
#           -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }} \
#           -Dsonar.host.url=https://sonarcloud.io \
#           -Dsonar.login=${{ secrets.SONAR_TOKEN }}

#   deploy:
#     name: Deploy to AKS
#     runs-on: ubuntu-latest
#     needs: [build-and-push, security-scan]
#     environment: production
    
#     steps:
#     - name: Checkout
#       uses: actions/checkout@v4

#     - name: Setup SSH Key
#       run: |
#         mkdir -p ~/.ssh
#         echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
#         chmod 600 ~/.ssh/id_rsa
#         ssh-keyscan -H ${{ secrets.JUMP_SERVER_IP }} >> ~/.ssh/known_hosts

#     - name: Deploy to AKS via Jump Server
#       run: |
#         # Copy ALL files to jump server
#         scp -r k8s/ azureuser@${{ secrets.JUMP_SERVER_IP }}:~/
#         scp -r scripts/ azureuser@${{ secrets.JUMP_SERVER_IP }}:~/
        
#         # Execute deployment on jump server
#         ssh azureuser@${{ secrets.JUMP_SERVER_IP }} << 'EOF'
#           # STEP 1: Setup jump server (install tools)
#           echo "🛠️ Setting up jump server tools..."
#           chmod +x scripts/*.sh
#           ./scripts/setup-jump-server.sh
          
#           # STEP 2: Set environment variables
#           export RESOURCE_GROUP_NAME="${{ secrets.RESOURCE_GROUP_NAME }}"
#           export AKS_CLUSTER_NAME="${{ secrets.AKS_CLUSTER_NAME }}"
#           export ACR_LOGIN_SERVER="${{ needs.build-and-push.outputs.acr-login-server }}"
#           export IMAGE_TAG="${{ env.IMAGE_TAG }}"
#           export DB_HOST="${{ secrets.DATABASE_FQDN }}"
#           export DB_PASSWORD="${{ secrets.DATABASE_ADMIN_PASSWORD }}"
#           export APP_INSIGHTS_KEY="${{ secrets.APPLICATION_INSIGHTS_INSTRUMENTATION_KEY }}"
#           export CLOUDFLARE_API_KEY="${{ secrets.CLOUDFLARE_API_KEY }}"
#           export ARM_CLIENT_ID="${{ secrets.ARM_CLIENT_ID }}"
#           export ARM_CLIENT_SECRET="${{ secrets.ARM_CLIENT_SECRET }}"
#           export ARM_TENANT_ID="${{ secrets.ARM_TENANT_ID }}"
          
#           # STEP 3: Run deployment
#           echo "🚀 Starting application deployment..."
#           ./scripts/deploy-to-aks.sh
#         EOF

#     - name: Verify Deployment
#       run: |
#         ssh azureuser@${{ secrets.JUMP_SERVER_IP }} << 'EOF'
#           kubectl get pods -n retoucherirving
#           kubectl get services -n retoucherirving
#           kubectl get ingress -n retoucherirving
#         EOF

#     - name: Deployment Summary
#       run: |
#         echo "## 🚀 Deployment Successful" >> $GITHUB_STEP_SUMMARY
#         echo "- Backend Image: \`${{ needs.build-and-push.outputs.acr-login-server }}/retoucherirving/backend:${{ env.IMAGE_TAG }}\`" >> $GITHUB_STEP_SUMMARY
#         echo "- Frontend Image: \`${{ needs.build-and-push.outputs.acr-login-server }}/retoucherirving/frontend:${{ env.IMAGE_TAG }}\`" >> $GITHUB_STEP_SUMMARY
#         echo "- Website: https://retoucherirving.com" >> $GITHUB_STEP_SUMMARY
#         echo "- Jump Server: ${{ secrets.JUMP_SERVER_IP }}" >> $GITHUB_STEP_SUMMARY